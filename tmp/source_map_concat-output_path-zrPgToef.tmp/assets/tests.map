{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-u/tests/acceptance/user-test.js","ember-u/tests/acceptance/user-test.lint-test.js","ember-u/tests/app.lint-test.js","ember-u/tests/helpers/destroy-app.js","ember-u/tests/helpers/destroy-app.lint-test.js","ember-u/tests/helpers/module-for-acceptance.js","ember-u/tests/helpers/module-for-acceptance.lint-test.js","ember-u/tests/helpers/resolver.js","ember-u/tests/helpers/resolver.lint-test.js","ember-u/tests/helpers/start-app.js","ember-u/tests/helpers/start-app.lint-test.js","ember-u/tests/resolver.lint-test.js","ember-u/tests/router.lint-test.js","ember-u/tests/routes/about.lint-test.js","ember-u/tests/routes/contact.lint-test.js","ember-u/tests/routes/emberu.lint-test.js","ember-u/tests/routes/index.lint-test.js","ember-u/tests/routes/login.lint-test.js","ember-u/tests/routes/login/profile.lint-test.js","ember-u/tests/routes/registration.lint-test.js","ember-u/tests/test-helper.js","ember-u/tests/test-helper.lint-test.js","ember-u/tests/unit/routes/about-test.js","ember-u/tests/unit/routes/about-test.lint-test.js","ember-u/tests/unit/routes/contact-test.js","ember-u/tests/unit/routes/contact-test.lint-test.js","ember-u/tests/unit/routes/emberu-test.js","ember-u/tests/unit/routes/emberu-test.lint-test.js","ember-u/tests/unit/routes/index-test.js","ember-u/tests/unit/routes/index-test.lint-test.js","ember-u/tests/unit/routes/login-test.js","ember-u/tests/unit/routes/login-test.lint-test.js","ember-u/tests/unit/routes/login/profile-test.js","ember-u/tests/unit/routes/login/profile-test.lint-test.js","ember-u/tests/unit/routes/profile-test.js","ember-u/tests/unit/routes/profile-test.lint-test.js","ember-u/tests/unit/routes/registration-test.js","ember-u/tests/unit/routes/registration-test.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-u/tests/acceptance/user-test', ['exports', 'qunit', 'ember-u/tests/helpers/module-for-acceptance'], function (exports, _qunit, _emberUTestsHelpersModuleForAcceptance) {\n\n  (0, _emberUTestsHelpersModuleForAcceptance['default'])('Acceptance | user');\n\n  (0, _qunit.test)('visiting /user', function (assert) {\n    visit('/user');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/user');\n    });\n  });\n\n  (0, _qunit.test)('should show ember-u as the home page', function (assert) {});\n\n  (0, _qunit.test)('should link to information about the company.', function (assert) {});\n\n  (0, _qunit.test)('should link to contact information.', function (assert) {});\n});","define('ember-u/tests/acceptance/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/user-test.js should pass ESLint.\\n14:56  - \\'assert\\' is defined but never used. (no-unused-vars)\\n17:65  - \\'assert\\' is defined but never used. (no-unused-vars)\\n20:55  - \\'assert\\' is defined but never used. (no-unused-vars)');\n  });\n});","define('ember-u/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ember-u/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'ember-u/tests/helpers/start-app', 'ember-u/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _emberUTestsHelpersStartApp, _emberUTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _emberUTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _emberUTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('ember-u/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/helpers/resolver', ['exports', 'ember-u/resolver', 'ember-u/config/environment'], function (exports, _emberUResolver, _emberUConfigEnvironment) {\n\n  var resolver = _emberUResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _emberUConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _emberUConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ember-u/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/helpers/start-app', ['exports', 'ember', 'ember-u/app', 'ember-u/config/environment'], function (exports, _ember, _emberUApp, _emberUConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _emberUConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _emberUApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ember-u/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/about.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/about.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/contact.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/contact.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/emberu.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/emberu.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/emberu.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/login.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/login.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint.\\n4:2  - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n});","define('ember-u/tests/routes/login/profile.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/login/profile.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login/profile.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/routes/registration.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/registration.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/registration.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/test-helper', ['exports', 'ember-u/tests/helpers/resolver', 'ember-qunit'], function (exports, _emberUTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_emberUTestsHelpersResolver['default']);\n});","define('ember-u/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/about-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/about-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact', 'Unit | Route | contact', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/contact-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/contact-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/emberu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:emberu', 'Unit | Route | emberu', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/emberu-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/emberu-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/emberu-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/index-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/index-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/login-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/login-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/login/profile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login/profile', 'Unit | Route | login/profile', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/login/profile-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/login/profile-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login/profile-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/profile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:profile', 'Unit | Route | profile', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/profile-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/profile-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/profile-test.js should pass ESLint.\\n');\n  });\n});","define('ember-u/tests/unit/routes/registration-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:registration', 'Unit | Route | registration', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-u/tests/unit/routes/registration-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/registration-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/registration-test.js should pass ESLint.\\n');\n  });\n});","require('ember-u/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbfile":"tests.js"}